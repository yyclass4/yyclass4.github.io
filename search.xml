<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客加载速度问题</title>
    <url>/yyclass4/2020/08/06/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>前天，有一哥们儿跟我说我的博客加载速度超慢。我自己看了一下，好像时确实存在这个问题。这不能赖gitee或者是运营商，得从自身找原因。</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p> 首先想到的是图片的大小问题，这跟加载速度有很大关系，越大越慢，越小越快。在之前两篇的博客里，实例图片都用的是原图，也就是上传的<code>gitee</code>仓库里的。当然，这种办法也很重要，这里有必要说明一下。</p>
<h2 id="图片引用的相对路径"><a href="#图片引用的相对路径" class="headerlink" title="图片引用的相对路径"></a>图片引用的相对路径</h2><p>  首先，在<code>blog</code>目录下找到<code>_config.yml</code>文件，找到以下代码：<br>  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><br>将其中<code>post_asset_folder</code>后的<code>false</code>改为<code>true</code>，这样以后在创建新文章的时候，hexo就会在<code>blog/source/posts</code>目录下，新建一个与你博客标题同名的文件夹，你就可以把要用的图片放进去。<br>在编写文章的<code>.md</code>文件时在要插入图片的地方使用以下标签：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg this is an example image %&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>example.jpg</code>就是图片文件名，当然后缀也可以是<code>.png</code>，然后<code>this is an example image</code>就是图片的描述文字。<br>但是，这种办法很容易导致图片过大而加载缓慢，建议先将图片压缩后再上传。这里推荐<a href="https://tinypng.com/" target="_blank" rel="noopener">在线压缩</a>。</p>
<h2 id="引用网络图片"><a href="#引用网络图片" class="headerlink" title="引用网络图片"></a>引用网络图片</h2><p> 这是一种非常简单的办法，而网络上的图标往往都是经过压缩的，省去了很多过程。在需要插入图片的地方使用以下标签：<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片的描述文字</span>](<span class="link">图片的地址</span>)</span><br></pre></td></tr></table></figure><br>以上两种方法的图片都经过压缩，原来5MB的图片压缩后只有700KB，能极大加快加载速度。</p>
<h1 id="静态文件的大小"><a href="#静态文件的大小" class="headerlink" title="静态文件的大小"></a>静态文件的大小</h1><p>  除了图片，网站静态文件也很关键，这里使用<code>gulp</code>插件实现压缩，在``blog`根目录里，安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-htmlmin</span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br><span class="line">npm install --save-dev gulp-imagemin</span><br></pre></td></tr></table></figure>
<p>随后，在<code>blog</code>目录里创建一个<code>gulpfile.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>)</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"><span class="comment">// tester </span></span><br><span class="line"><span class="comment">// var uglifyjs = require('terser')</span></span><br><span class="line"><span class="comment">// var composer = require('gulp-uglify/composer')</span></span><br><span class="line"><span class="comment">// var pump = require('pump')</span></span><br><span class="line"><span class="comment">// var minify = composer(uglifyjs, console)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// babel </span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - babel</span></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, () =&gt;</span><br><span class="line">  gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">      presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify().on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - tester </span></span><br><span class="line"><span class="comment">// gulp.task('compress', function (cb) &#123;</span></span><br><span class="line"><span class="comment">//   var options = &#123;&#125;</span></span><br><span class="line"><span class="comment">//   pump([</span></span><br><span class="line"><span class="comment">//     gulp.src(['./public/**/*.js', '!./public/**/*.min.js']),</span></span><br><span class="line"><span class="comment">//     minify(options),</span></span><br><span class="line"><span class="comment">//     gulp.dest('./public')</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   cb</span></span><br><span class="line"><span class="comment">//   )</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录内 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>, <span class="comment">// 清除 HTML 註释</span></span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 压缩 HTML</span></span><br><span class="line">      collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">// 省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">// 删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">// 删除 &lt;script&gt; 的 type="text/javascript"</span></span><br><span class="line">      removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">// 删除 &lt;style&gt; 和 &lt;link&gt; 的 type="text/css"</span></span><br><span class="line">      minifyJS: <span class="literal">true</span>, <span class="comment">// 压缩页面 JS</span></span><br><span class="line">      minifyCSS: <span class="literal">true</span>, <span class="comment">// 压缩页面 CSS</span></span><br><span class="line">      minifyURLs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./public/img/**/*.*'</span>)</span><br><span class="line">    .pipe(imagemin(&#123;</span><br><span class="line">      optimizationLevel: <span class="number">5</span>, <span class="comment">// 类型：Number  预设：3  取值範围：0-7（优化等级）</span></span><br><span class="line">      progressive: <span class="literal">true</span>, <span class="comment">// 类型：Boolean 预设：false 无失真压缩jpg图片</span></span><br><span class="line">      interlaced: <span class="literal">false</span>, <span class="comment">// 类型：Boolean 预设：false 隔行扫描gif进行渲染</span></span><br><span class="line">      multipass: <span class="literal">false</span> <span class="comment">// 类型：Boolean 预设：false 多次优化svg直到完全优化</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/img'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.parallel(</span><br><span class="line">  <span class="string">'compress'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-html'</span>, <span class="string">'minify-images'</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p><code>以上方法来源于[jerry](https://demo.jerryc.me)</code><br>这样，以后在部署博客时，命令就变成了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>所有步骤完成后，就可以发现加载速度快了许多。</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客搭建的那些事</title>
    <url>/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p>  啦啦啦，折腾了快两个月，博客终于搞定了=。=<br>  这期间由于学习方面的事情，建博客的工作停滞了很长一段时间。现在终于期末考完了，有时间折腾了。<br>  当然，在这里要感谢<a href="https://blog.soulxyz.top/" target="_blank" rel="noopener">开哥</a>,不厌其烦的为我提供技术指导。<br>  还要感谢<a href="https://demo.jerryc.me/" target="_blank" rel="noopener">jerry</a>,提供了非常棒的<code>butterfly</code>主题。<br>  在白手起家建博客的过程中，踩了无数的坑。我想我要把完整的过程记下来，方便日后的整理和学习。也对像我一样的<code>git</code>小白提供帮助。<br>  <code>先来首歌放松一下吧</code></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>  需要安装：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js</a>,<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git工具</a>.两种工具都是傻瓜式的安装，一路选择默认就可以了。<br>            还有读写<code>.yml</code>文件的工具，这里推荐<a href="https://www.microsoft.com/zh-cn/p/serris-code-editor/9nblggh4rm22?activetab=pivot:overviewtab" target="_blank" rel="noopener">官方的软件</a></p>
<div class="note primary no-icon">
            <p>安装完成后，在电脑桌面上点击右键，可以看到对话框中多了<code>git GUI here</code>和<code>git bash here</code>,说明安装成功。</p>
          </div>

<div class="note danger">
            <p>安装node.js时要注意版本信息，有时版本过高git命令会报错，这是就要安装旧一点的node.js</p>
          </div>

<h1 id="hexo的安装及初始化博客"><a href="#hexo的安装及初始化博客" class="headerlink" title="hexo的安装及初始化博客"></a>hexo的安装及初始化博客</h1><p> 由于<code>hexo</code>的镜像文件在国外，经常会被墙，导致初始化失败，所以这时候就要先安装淘宝的镜像文件来代替。在电脑桌面上右键打开git bash，执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br> 等待安装完成。然后继续执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure></p>
<p> 安装完成后，继续执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><br> 这一个步骤对网络要求比较高，如果网络不顺畅，很容易出现各种报错(warning),多试几次就好了。等到命令执行完后，再执行:<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><br> 至此，hexo就算安装完了。回到电脑桌面，可以看到多出来一个名为<code>blog</code>的文件夹。这就是hexo工作的文件夹。</p>
 <div class="note primary no-icon">
            <p>如果你这时候已经迫不及待的想看看自己的博客了，可以在blog目录下执行命令<code>hexo s</code>,然后再浏览器中输入网址<code>http://localhost:4000</code>,就可以在本地预览博客了。</p>
          </div>

<h1 id="推送到gitee（因为github经常被墙，巨慢无比）"><a href="#推送到gitee（因为github经常被墙，巨慢无比）" class="headerlink" title="推送到gitee（因为github经常被墙，巨慢无比）"></a>推送到gitee（因为github经常被墙，巨慢无比）</h1><p> 首先你要有个<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>的账号，在上面创建一个新的仓库，名字随便取。</p>
 <img src="/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/a.png" class title="实例图片">

<p> 然后进入到<code>blog</code>目录里先后执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><br> 从命令的反馈里可以看到，hexo生成了很多<code>css</code>,<code>js</code>的静态文件。然后继续执行命令：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-devepoler-git --save</span><br></pre></td></tr></table></figure></p>
<p> 这里安装了一个hexo的插件，用于自动部署。</p>
<p> 随后进入到blog目录里打开_config.yml文件，在最下面添加以下代码：</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>然后，回到gitee上你刚刚新建的仓库里，复制它给你的<code>ssh</code>地址到上述代码的<code>repository</code>中：</p>
<img src="/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/b.png" class title="实例图片">

<div class="note danger">
            <p>注意：在配置所有的_config.yml文件时，所有的冒号后面都要加一个空格，否则hexo命令会报错</p>
          </div>

<h2 id="生成密匙"><a href="#生成密匙" class="headerlink" title="生成密匙"></a>生成密匙</h2><h3 id="和gitee的通讯方式"><a href="#和gitee的通讯方式" class="headerlink" title="和gitee的通讯方式"></a>和gitee的通讯方式</h3><p>首先，在桌面上右键打开<code>git bash</code>工具，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config –global user.name <span class="string">'xxxxx'</span></span><br><span class="line">git config –global user.email <span class="string">'xxx@xx.xxx'</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>name</code>就是你的gitee的用户名，<code>email</code>就是你用来创建gitee的邮箱，这一步等于告诉了git你的身份。</p>
<div class="note primary no-icon">
            <p>配置完用户信息后，如果git命令没有任何回馈，则代表配置成功。</p>
          </div>

<p>配置完后，接着输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你在上一步输入的邮箱"</span></span><br></pre></td></tr></table></figure>
<p>然后一路回车，出现类似一下回馈，代表创建<code>ssh</code>密匙完成：</p>
<img src="/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/c.png" class title="实例图片">

<p>创建完成后，再执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>git的回馈就是你的密匙，把他全部copy下来，粘贴到gitee上</p>
<img src="/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/d.png" class title="实例图片">
<p>在<code>gitee主页--头像--设置--ssh密匙</code>里添加密匙</p>
<p>之后回到本地，在blog目录里执行<code>hexo d</code>,博客就推送到线上了，去<code>仓库--服务--gitee pages</code>开通gitee.pages服务，博客就算建完了。</p>
<img src="/yyclass4/2020/08/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/e.png" class title="实例图片">

<p>完成之后，打开自己的网页，会发现<code>css</code>,<code>js</code>文件没有加载，这时候你又要回到本地的_<code>cnfig.yml</code>文件中，找到以下代码片段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> </span><br><span class="line"><span class="attr">root:</span></span><br></pre></td></tr></table></figure>
<p>按照他的要求填写，例如，我的就是：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://ran_brother.gitee.io/blog</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure>
<p>完成之后再执行<code>hexo clean</code>,<code>hexo g</code>,hexo d<code>,去更新gitee pages服务，</code>css<code>,</code>js`文件就可以正常显示了。</p>
<h1 id="发表新的文章"><a href="#发表新的文章" class="headerlink" title="发表新的文章"></a>发表新的文章</h1><p> 在blog目录中，执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章题目</span><br></pre></td></tr></table></figure><br> 就会发现在blog/source/posts文件夹里多了一个与你新的文章名字相同的.md文件。用编辑器编辑里面的内容，注意要用<code>markdown</code>语法。<br> 如果对markdown语法不熟练，<a href="http://www.mdeditor.com/" target="_blank" rel="noopener">请戳我</a>.完成之后保存。回到blog目录中，先后执行：<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><br> 再去gitee更新一下pages服务，就可以看到自己的文章了。</p>
<p> 以上只是hexo的基础部分，很多地方不完善，日后我会把其他完善的过程继续记录下。</p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建日记--B站篇</title>
    <url>/yyclass4/2021/06/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0-B%E7%AB%99%E7%AF%87/</url>
    <content><![CDATA[<p>  忽然想起movies分类页里啥也没有，只有两个onedrive的视频分享链接，可以说是空空如也，于是决定再加一点内容。在<a href="hexo.io">hexo</a>的官网找了一下，发现一的个很不错的插件，支持将B站的视频嵌入到博客中。</p>
<div class="note info modern">
            <p>为什么不用Dplayer？诚然，<a href="https://github.com/MoePlayer/DPlayer">Dplayer</a>作为一个网站嵌入式视频播放器相当优秀，功能强大实用.调用也很方便。但是不足之处在于不支持类似于B站的流媒体格式，要求你必须拥有.mp4等格式的原始文件，这就极大的限制了它的使用范围。再说，哪个白嫖党会去网上租空间放视频？=。=</p>
          </div>
<p>  该项目名叫<a href="https://github.com/Z4Tech/hexo-tag-bilibili">hexo-tag-bilibili</a>,安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-tag-bilibili</span><br></pre></td></tr></table></figure>
<p>但是在官网上，安装的命令是这样子的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-bilibili</span><br></pre></td></tr></table></figure>
<p>如果执行官网的这个命令，就会出现：</p>
<img src="/yyclass4/2021/06/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0-B%E7%AB%99%E7%AF%87/0.png" class title="实例图片">
<div class="note danger">
            <p>请注意当前的版本是否符合其要求</p>
          </div>
<p>可以看出，报了一堆的错，没有安装成功。折腾了好久，翻回之前的博客文章，才发现<code>npm</code>y应该换成<code>cnpm</code>，原因参见前几篇的文章。<br>好不容易安装完，又有新的问题，真是吐了。弄完之后随便塞个B站视频的id进去发现播放不了，研究了一下发现插件生成的网址key居然用的是av？！我的天，众所周知B站现在全是bv号，只有仅存的几个还保留着av号。</p>
<img src="/yyclass4/2021/06/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0-B%E7%AB%99%E7%AF%87/2.png" class title="逝去的av">
<img src="/yyclass4/2021/06/11/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0-B%E7%AB%99%E7%AF%87/3.png" class title="现在的bv">
<p>唉，实在没办法，这个插件版本太旧了，项目作者也不知道多久没有更新过了，将就着用吧。</p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>第一天启动博客</title>
    <url>/yyclass4/2020/08/01/%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%90%AF%E5%8A%A8%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[ <img src="/yyclass4/2020/08/01/%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%90%AF%E5%8A%A8%E5%8D%9A%E5%AE%A2/example.jpg" class title="This is an example image">
<p>测试用文章</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>重新恢复博客</title>
    <url>/yyclass4/2021/05/31/%E9%87%8D%E6%96%B0%E6%81%A2%E5%A4%8D%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>  又有很长一段时间没有更新博客了，这段时间里发生了太多事情，太多变故了。首先是疫情的反弹，广州现在疫情防控形势很严峻，都是居家学习，所以才有时间更新博客，平时学业上的事情实在是太多了。<br>  时间过得真快，一下子就高三了，努力！<br>  本来当时想着要经常更新博客的，但时间根本不允许，以后有时间了一定要频繁更新：）。。。</p>
]]></content>
      <tags>
        <tag>说明</tag>
      </tags>
  </entry>
</search>
